# import User,Institution,Course, UserWhereUniqueInput, CourseOrderByInput, ResponseImageWhereInput, CourseWhereInput, AnswerWhereInput, ChallengeWhereInput, ResponseImageOrderByInput,  QuestionChoiceWhereInput, PanelWhereInput,  TestWhereInput, DepartmentWhereInput, UserOrderByInput, UserWhereInput, InstitutionWhereInput, InstitutionOrderByInput, DepartmentOrderByInput, TestOrderByInput, PanelOrderByInput, QuestionWhereInput, QuestionOrderByInput, QuestionChoice, ChallengeOrderByInput, AnswerOrderByInput, Test, Question, QuestionChoice, Challenge, Answer,Sequence from "./generated/prisma.graphql"

directive @isAuthenticated on QUERY | FIELD_DEFINITION  | MUTATION
directive @hasRole(roles: [String]) on QUERY | FIELD_DEFINITION  | MUTATION
directive @isOwner(type: String) on QUERY | FIELD_DEFINITION  | MUTATION

type Query {

  institutions(filter: String, where: InstitutionWhereInput, skip: Int, first: Int, orderBy: InstitutionOrderByInput): InstitutionSearch! @isAuthenticated
  institution(id: ID!): Institution! @isAuthenticated
  courses(filter: String, where: CourseWhereInput, skip: Int, first: Int, orderBy: CourseOrderByInput): CourseSearch! @isAuthenticated
  course(id: ID!): Course! @isAuthenticated
  users(filter: String, where: UserWhereInput, skip: Int, first: Int, orderBy: UserOrderByInput): UserSearch! @isAuthenticated
  user(id: ID!): User! @isAuthenticated
  tests(filter: String, where: TestWhereInput, skip: Int, first: Int, orderBy: TestOrderByInput): TestSearch! @isAuthenticated
  test(id: ID!): Test! @isAuthenticated
  testStats(testId: String): PercentCorrect! @isAuthenticated
  userTestStats(testId: String, userId: String): PercentCorrect! @isAuthenticated
  responseImages(filter: String, where: ResponseImageWhereInput,  skip: Int, first: Int, orderBy: ResponseImageOrderByInput): ResponseImageSearch! @isAuthenticated
  panels(filter: String, where: PanelWhereInput, skip: Int, first: Int, orderBy: PanelOrderByInput): PanelSearch! @isAuthenticated
  questions(filter: String, where: QuestionWhereInput, skip: Int, first: Int, orderBy: QuestionOrderByInput): QuestionSearch! @isAuthenticated
  question(id: ID!): Question! @isAuthenticated
  questionStats(questionId: String): PercentCorrect! @isAuthenticated
  questionchoices(filter: String, where: QuestionChoiceWhereInput, skip: Int, first: Int, orderBy: QuestionChoiceOrderByInput): QuestionChoiceSearch! @isAuthenticated
  challenges(filter: String, where: ChallengeWhereInput, skip: Int, first: Int, orderBy: ChallengeOrderByInput): ChallengeSearch! @isAuthenticated
  challenge(id: ID!): Challenge! @isAuthenticated
  answers(filter: String, where: AnswerWhereInput, skip: Int, first: Int, orderBy: AnswerOrderByInput): AnswerSearch! @isAuthenticated
  answer(id: ID!): Answer! @isAuthenticated
  sequences(filter: String): [Sequence!]! @isAuthenticated

  me: User
}

type Mutation {

  signup(email: String!, password: String!, firstName: String!,lastName: String!, role: String, institution: ID): signUpPayload

  login(email: String!, password: String!): AuthPayload

  logout: signUpPayload

  newPasswordRequest(email: String!): signUpPayload

  resetPassword(email: String!, resetToken: String!, resetPassword: String!): signUpPayload

  confirmEmail(email: String!, confirmationToken: String!): signUpPayload

  sendInvite(emails:[String!], courseId: ID!): signUpPayload

  addInstitution(name: String!, type: String, contactIds: ID, teacherIds: [ID], studentIds: [ID], courseIds: [ID]): Institution ! @hasRole(roles: ["QUANDRIA"])

  updateInstitution(id: ID!, name: String, type: String, contactIds: [ID], teacherIds: [ID], studentIds: [ID], adminIds: [ID] courseIds: [ID]): Institution! @hasRole(roles: ["QUANDRIA","ADMIN"])

  deleteInstitution(id: ID!): Institution! @hasRole(roles: ["QUANDRIA"])

  addCourse(name: String!, department1: String, courseNumber: String, time: String, deleted: Boolean, institutionId: ID!): Course! @hasRole(roles: ["TEACHER","ADMIN"])

  updateCourse(id: ID!, name: String, department1: String, courseNumber: String, time: String, deleted: Boolean, teacherIds: [ID], studentIds: [ID]): Course! @hasRole(roles: ["TEACHER","ADMIN"])

  deleteCourse(id: ID!): Course! @hasRole(roles: ["TEACHER","ADMIN"])

  addTest(subject: String!, testNumber: String, testDate: DateTime, deleted: Boolean, courseId: ID!): Test! @hasRole(roles: ["TEACHER","ADMIN"])

  updateTest(id: ID!, subject: String, testNumber: String, testDate: DateTime, published: Boolean, publishDate: DateTime, release: Boolean, releaseDate: DateTime, deleted: Boolean): Test! @hasRole(roles: ["TEACHER","ADMIN"])

  deleteTest(id: ID!): Test! @hasRole(roles: ["TEACHER","ADMIN"])

  addPanel(link: String!, testId: ID!): Panel! @hasRole(roles: ["TEACHER","ADMIN"])

  deletePanel(id: ID!): Panel! @hasRole(roles: ["TEACHER","ADMIN"])

  link: String!, type: String!

  addResponseImage(link: String!, type: String!): ResponseImage! @hasRole(roles: ["QUANDRIA"])

  updateResponseImage(id: ID!, link: String, type: String): ResponseImage! @hasRole(roles: ["QUANDRIA"])

  deleteResponseImage(id: ID!): ResponseImage! @hasRole(roles: ["QUANDRIA"])

  addQuestion(question: String!, testId: ID!, panelId: ID!, sentToId: ID, correctResponseImageId: ID, incorrectResponseImageId: ID): Question! @hasRole(roles: ["TEACHER","STUDENT","ADMIN"])

  updateQuestion(id: ID!, question: String, sentToId: ID, correctResponseId: ID, incorrectResponseId: ID): Question! @hasRole(roles: ["STUDENT"])

  deleteQuestion(id: ID!): Question! @hasRole(roles: ["TEACHER","STUDENT","ADMIN"])

  addQuestionChoice(choice: String!, correct: Boolean, questionId: ID!): QuestionChoice! @hasRole(roles: ["STUDENT"])

  updateQuestionChoice(id: ID!, choice: String, correct: Boolean): QuestionChoice! @hasRole(roles: ["STUDENT"])

  deleteQuestionChoice(id: ID!): QuestionChoice! @hasRole(roles: ["STUDENT"])

  addChallenge(challenge: String!, questionId: ID!): Challenge! @hasRole(roles: ["TEACHER","STUDENT","ADMIN"])

  updateChallenge(id: ID!, challenge: String): Challenge! @hasRole(roles: ["TEACHER","STUDENT","ADMIN"])

  deleteChallenge(id: ID!): Challenge! @hasRole(roles: ["TEACHER","STUDENT","ADMIN"])

  addAnswer(questionId: ID!, answerChoiceId: ID!): Answer! @hasRole(roles: ["STUDENT"])

  deleteAnswer(id: ID!): Answer! @hasRole(roles: ["STUDENT"])

  addSequence(testId: ID!, studentIds: [ID!]!, panelIds: [ID!]!): Sequence!

  updateSequence(id: ID!, studentIds: [ID], usedStudentIds: [ID], panelIds: [ID], usedPanelIds: [ID]): Sequence!

  deleteSequence(id: ID!): Sequence!

  publishTest(id: ID!, startHour: String, endHour: String, testEndDate: DateTime): Test!

  sendQuestion(id: ID!): Sequence

  joinCourse(courseId: ID!): JoinCourse

  updateUser(email: String,
  salutation: String,
  firstName: String,
  lastName: String,
  institution: ID,
  adminInstitution: ID,
  teacherInstitutions: [ID],
  studentInstitutions: [ID],
  studentIds:[String],
  teacherIds: [String],
  phone: String,
  online: Boolean): User!
}

type UserSearch {
  users: [User!]!
  count: Int!
}

type CourseSearch {
  courses: [Course!]!
  count: Int!
}

type InstitutionSearch {
  institutions: [Institution!]!
  count: Int!
}

type TestSearch {
  tests: [Test!]!
  count: Int!
}

type PanelSearch {
  panels: [Panel!]!
  count: Int!
}

type ResponseImageSearch {
  panels: [ResponseImage!]!
  count: Int!
}

type QuestionSearch {
  questions: [Question!]!
  count: Int!
}

type PercentCorrect {
  total: Int!
  totalCorrect: Int!
  percentCorrect: Float!
}

type QuestionChoiceSearch {
  questionchoices: [QuestionChoice!]!
  count: Int!
}

type ChallengeSearch {
  challenges: [Challenge!]!
  count: Int!
}

type AnswerSearch {
  answers: [Answer!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
  authMsg: String
}

type signUpPayload {
  authMsg: String
  user: User
}

type SentQuestion {
  sentTo: User!
  sentPanel: Panel!
}

type JoinCourse {
  authMsg: String!
  course: Course!
}
