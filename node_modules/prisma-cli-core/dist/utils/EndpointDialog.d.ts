import { Output, Client, Config } from 'prisma-cli-engine';
import { Cluster, Environment } from 'prisma-yml';
export interface GetEndpointParams {
    folderName: string;
}
export declare type DatabaseType = 'postgres' | 'mysql';
export interface DatabaseCredentials {
    type: DatabaseType;
    host: string;
    port: number;
    user: string;
    password: string;
    database?: string;
    alreadyData?: boolean;
}
export interface GetEndpointResult {
    endpoint: string;
    cluster: Cluster | undefined;
    workspace: string | undefined;
    service: string;
    stage: string;
    localClusterRunning: boolean;
    database?: DatabaseCredentials;
    dockerComposeYml: string;
    datamodel: string;
}
export interface HandleChoiceInput {
    choice: string;
    loggedIn: boolean;
    folderName: string;
    localClusterRunning: boolean;
    clusters?: Cluster[];
}
export declare class EndpointDialog {
    out: Output;
    client: Client;
    env: Environment;
    config: Config;
    constructor(out: Output, client: Client, env: Environment, config: Config);
    getEndpoint(): Promise<GetEndpointResult>;
    encodeName(name: any): any;
    decodeName(name: any): any;
    printDatabaseConfig(credentials: DatabaseCredentials): any;
    printDatabaseService(type: DatabaseType): string;
    handleChoice({choice, loggedIn, folderName, localClusterRunning, clusters}: HandleChoiceInput): Promise<GetEndpointResult>;
    getDatabase(): Promise<DatabaseCredentials>;
    private getClusterAndWorkspaceFromChoice(choice);
    private getCloudClusters();
    private projectExists(cluster, name, stage, workspace);
    private listFiles();
    private isClusterOnline(endpoint);
    private getClusterQuestion(fromScratch, hasDockerComposeYml, clusters);
    private getClusterDescription(c);
    private askForDatabaseType();
    private convertChoices(choices);
    private askForStage(defaultName);
    private askForService(defaultName);
    private customEndpointSelector(defaultName);
    private ask({message, defaultValue, key, validate, required});
    private getSillyName();
    private getPublicName();
}
